from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import imageio
import matplotlib.pyplot as plt


def loss_const(x, transformation, mask):
  x_unmasked = tf.math.multiply(x, 1-mask)
  transformation_unmasked = tf.math.multiply(transformation, 1-mask)
  difference = tf.subtract(x_unmasked, transformation_unmasked)
  difference = tf.reshape(difference, [-1,784,1])
  return tf.math.square(tf.norm(difference, ord=2, axis=1))
#loss_const(recon_image, trafo_image, mask_example)


# kappa is the expected rate of changing pixels, a hyperparameter
def loss_count(mask, kappa):
  return tf.math.maximum(tf.math.reduce_sum(abs(mask), axis=[1,2])/784, kappa)
  
  
def loss_smoothness(mask):
  return tf.image.total_variation(mask)
#loss_smoothness(recon_image)


def loss_entropy(mask):
  min_elementwise = tf.minimum(mask, 1-mask)
  min_elementwise = tf.reshape(min_elementwise, [-1,784,1])
  return tf.norm(min_elementwise, ord=2, axis=1)
#testing = tf.reshape(tf.minimum(trafo_image, 1-trafo_image), [-1,784,1])
#tf.reduce_sum(tf.math.square(testing))
#tf.math.square(tf.norm(testing, ord=2))
