from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import imageio
import matplotlib.pyplot as plt


# Mostly copied from the tf DCGAN tutorial. We will have two of them, one for each class
# Modification: Put sigmoid at the end (nothing there before) to get values between 0 and 1
# In the Silberman paper they say that these 2 discriminators share their last few layers.
# Maybe split it up like I did with the generator later on
def make_discriminator_model():
    model = tf.keras.Sequential()
    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same', use_bias=True,
                                     input_shape=[28, 28, 1]))
    # number of params for Conv2D: 64(output channels = number of filters) * 26(filter size 5*5*1 + 1 for a bias node)
    # In contrast to the generator model, we use bias nodes here. Maybe that would have been useless in the generator because of the batch normalizations
    # They normalize the input anyway, so any bias would get cancelled again
    # We also use dropout here!
    
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same', use_bias=True))
    #number of params for this Conv2D: 128(output channels) * 1601(filter size 5*5*64 + 1 for a bias node)
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Flatten())
    model.add(layers.Dense(1, use_bias=True, activation=tf.nn.sigmoid)) 
    # sigmoid to get value between 0 and 1 (Goodfellow2016 did this in their DCGAN too, so it should be a good idea here)

    return model
