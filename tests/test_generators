from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import imageio
import matplotlib.pyplot as plt


# Generate example images for some checks
noise = tf.random.normal([1, 128]) # make this a 128 too to match the size of the latent variable that should actually be at this place
trafo_image = transformator(generator_start(noise, training=False)) # instead of transformator, we can also use reconstructor here
recon_image = reconstructor(generator_start(noise, training=False))
mask_example = mask(generator_start(noise, training=False))
#tf.add(tf.math.multiply(1-mask_example,trafo_image), tf.math.multiply((mask_example),recon_image))

plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.imshow(trafo_image[0, :, :, 0], cmap='gray')
plt.subplot(1,3,2)
plt.imshow(recon_image[0, :, :, 0], cmap='gray')
plt.subplot(1,3,3)
plt.imshow(mask_example[0,:,:,0], cmap='gray')
plt.show()

# only checking
#tf.reshape(recon_image[:,0:2,0:2,:],[-1])
#mask_example
